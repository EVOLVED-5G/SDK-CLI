# coding: utf-8

"""
    NEF_Emulator

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from evolved5g.swagger_client.api_client import ApiClient


class UEsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_ue_api_v1_u_es_post(self, body, **kwargs):  # noqa: E501
        """Create Ue  # noqa: E501

        Create new UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ue_api_v1_u_es_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UECreate body: (required)
        :return: UE
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_ue_api_v1_u_es_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_ue_api_v1_u_es_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_ue_api_v1_u_es_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Ue  # noqa: E501

        Create new UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_ue_api_v1_u_es_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UECreate body: (required)
        :return: UE
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_ue_api_v1_u_es_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_ue_api_v1_u_es_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/UEs/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UE',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_ue_api_v1_u_es_supi_delete(self, supi, **kwargs):  # noqa: E501
        """Delete Ue  # noqa: E501

        Delete a UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ue_api_v1_u_es_supi_delete(supi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supi: The SUPI of the UE you want to delete (required)
        :return: UE
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_ue_api_v1_u_es_supi_delete_with_http_info(supi, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_ue_api_v1_u_es_supi_delete_with_http_info(supi, **kwargs)  # noqa: E501
            return data

    def delete_ue_api_v1_u_es_supi_delete_with_http_info(self, supi, **kwargs):  # noqa: E501
        """Delete Ue  # noqa: E501

        Delete a UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_ue_api_v1_u_es_supi_delete_with_http_info(supi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supi: The SUPI of the UE you want to delete (required)
        :return: UE
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supi']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_ue_api_v1_u_es_supi_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supi' is set
        if ('supi' not in params or
                params['supi'] is None):
            raise ValueError("Missing the required parameter `supi` when calling `delete_ue_api_v1_u_es_supi_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supi' in params:
            path_params['supi'] = params['supi']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/UEs/{supi}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UE',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_gnb_id_api_v1_u_es_by_gnbgnb_id_get(self, g_nb_id, **kwargs):  # noqa: E501
        """Read Gnb Id  # noqa: E501

        Get gNB of specific UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_gnb_id_api_v1_u_es_by_gnbgnb_id_get(g_nb_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int g_nb_id: (required)
        :return: list[UE]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_gnb_id_api_v1_u_es_by_gnbgnb_id_get_with_http_info(g_nb_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_gnb_id_api_v1_u_es_by_gnbgnb_id_get_with_http_info(g_nb_id, **kwargs)  # noqa: E501
            return data

    def read_gnb_id_api_v1_u_es_by_gnbgnb_id_get_with_http_info(self, g_nb_id, **kwargs):  # noqa: E501
        """Read Gnb Id  # noqa: E501

        Get gNB of specific UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_gnb_id_api_v1_u_es_by_gnbgnb_id_get_with_http_info(g_nb_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int g_nb_id: (required)
        :return: list[UE]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['g_nb_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_gnb_id_api_v1_u_es_by_gnbgnb_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'g_nb_id' is set
        if ('g_nb_id' not in params or
                params['g_nb_id'] is None):
            raise ValueError("Missing the required parameter `g_nb_id` when calling `read_gnb_id_api_v1_u_es_by_gnbgnb_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'g_nb_id' in params:
            path_params['gNB_id'] = params['g_nb_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/UEs/by_gNB/{gNB_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UE]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_u_es_api_v1_u_es_get(self, **kwargs):  # noqa: E501
        """Read Ues  # noqa: E501

        Retrieve UEs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_u_es_api_v1_u_es_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int limit:
        :return: list[UEs]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_u_es_api_v1_u_es_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.read_u_es_api_v1_u_es_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def read_u_es_api_v1_u_es_get_with_http_info(self, **kwargs):  # noqa: E501
        """Read Ues  # noqa: E501

        Retrieve UEs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_u_es_api_v1_u_es_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int skip:
        :param int limit:
        :return: list[UEs]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['skip', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_u_es_api_v1_u_es_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/UEs/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UEs]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_ue_api_v1_u_es_supi_get(self, supi, **kwargs):  # noqa: E501
        """Read Ue  # noqa: E501

        Get UE by supi.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ue_api_v1_u_es_supi_get(supi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supi: The SUPI of the UE you want to retrieve (required)
        :return: UE
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_ue_api_v1_u_es_supi_get_with_http_info(supi, **kwargs)  # noqa: E501
        else:
            (data) = self.read_ue_api_v1_u_es_supi_get_with_http_info(supi, **kwargs)  # noqa: E501
            return data

    def read_ue_api_v1_u_es_supi_get_with_http_info(self, supi, **kwargs):  # noqa: E501
        """Read Ue  # noqa: E501

        Get UE by supi.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ue_api_v1_u_es_supi_get_with_http_info(supi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str supi: The SUPI of the UE you want to retrieve (required)
        :return: UE
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['supi']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_ue_api_v1_u_es_supi_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'supi' is set
        if ('supi' not in params or
                params['supi'] is None):
            raise ValueError("Missing the required parameter `supi` when calling `read_ue_api_v1_u_es_supi_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supi' in params:
            path_params['supi'] = params['supi']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/UEs/{supi}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UE',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def read_ue_cell_api_v1_u_es_by_cell_cell_id_get(self, cell_id, **kwargs):  # noqa: E501
        """Read Ue Cell  # noqa: E501

        Get Cell of specifc UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ue_cell_api_v1_u_es_by_cell_cell_id_get(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cell_id: (required)
        :return: list[UE]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.read_ue_cell_api_v1_u_es_by_cell_cell_id_get_with_http_info(cell_id, **kwargs)  # noqa: E501
        else:
            (data) = self.read_ue_cell_api_v1_u_es_by_cell_cell_id_get_with_http_info(cell_id, **kwargs)  # noqa: E501
            return data

    def read_ue_cell_api_v1_u_es_by_cell_cell_id_get_with_http_info(self, cell_id, **kwargs):  # noqa: E501
        """Read Ue Cell  # noqa: E501

        Get Cell of specifc UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.read_ue_cell_api_v1_u_es_by_cell_cell_id_get_with_http_info(cell_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cell_id: (required)
        :return: list[UE]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cell_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method read_ue_cell_api_v1_u_es_by_cell_cell_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cell_id' is set
        if ('cell_id' not in params or
                params['cell_id'] is None):
            raise ValueError("Missing the required parameter `cell_id` when calling `read_ue_cell_api_v1_u_es_by_cell_cell_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cell_id' in params:
            path_params['Cell_id'] = params['cell_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/UEs/by_Cell/{Cell_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UE]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_ue_api_v1_u_es_supi_put(self, body, supi, **kwargs):  # noqa: E501
        """Update Ue  # noqa: E501

        Update a UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ue_api_v1_u_es_supi_put(body, supi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UEUpdate body: (required)
        :param str supi: The SUPI of the UE you want to update (required)
        :return: UE
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_ue_api_v1_u_es_supi_put_with_http_info(body, supi, **kwargs)  # noqa: E501
        else:
            (data) = self.update_ue_api_v1_u_es_supi_put_with_http_info(body, supi, **kwargs)  # noqa: E501
            return data

    def update_ue_api_v1_u_es_supi_put_with_http_info(self, body, supi, **kwargs):  # noqa: E501
        """Update Ue  # noqa: E501

        Update a UE.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_ue_api_v1_u_es_supi_put_with_http_info(body, supi, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UEUpdate body: (required)
        :param str supi: The SUPI of the UE you want to update (required)
        :return: UE
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'supi']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_ue_api_v1_u_es_supi_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_ue_api_v1_u_es_supi_put`")  # noqa: E501
        # verify the required parameter 'supi' is set
        if ('supi' not in params or
                params['supi'] is None):
            raise ValueError("Missing the required parameter `supi` when calling `update_ue_api_v1_u_es_supi_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'supi' in params:
            path_params['supi'] = params['supi']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2PasswordBearer']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/UEs/{supi}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UE',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
