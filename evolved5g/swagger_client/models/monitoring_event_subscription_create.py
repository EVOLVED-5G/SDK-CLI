# coding: utf-8

"""
    NEF_Emulator

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MonitoringEventSubscriptionCreate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_id': 'str',
        'notification_destination': 'str',
        'monitoring_type': 'MonitoringType',
        'maximum_number_of_reports': 'int',
        'monitor_expire_time': 'datetime',
        "maximum_detection_time":'int',
        "reachability_type":'str'
    }

    attribute_map = {
        'external_id': 'externalId',
        'notification_destination': 'notificationDestination',
        'monitoring_type': 'monitoringType',
        'maximum_number_of_reports': 'maximumNumberOfReports',
        'monitor_expire_time': 'monitorExpireTime',
        "maximum_detection_time":"maximumDetectionTime",
        "reachability_type":"reachability_type"
    }

    def __init__(self, external_id='123456789@domain.com',
                 notification_destination='http://localhost:80/api/v1/utils/monitoring/callback',
                 monitoring_type=None,
                 maximum_number_of_reports=None,
                 monitor_expire_time=None,
                 maximum_detection_time=None,
                 reachability_type=None
                 ):  # noqa: E501
        """MonitoringEventSubscriptionCreate - a model defined in Swagger"""  # noqa: E501
        self._external_id = None
        self._notification_destination = None
        self._monitoring_type = None
        self._maximum_number_of_reports = None
        self._monitor_expire_time = None
        self._maximum_detection_time = None
        self._reachability_type = None
        self.discriminator = None
        if external_id is not None:
            self.external_id = external_id
        if notification_destination is not None:
            self.notification_destination = notification_destination
        self.monitoring_type = monitoring_type
        if maximum_number_of_reports is not None:
            self.maximum_number_of_reports = maximum_number_of_reports
        if monitor_expire_time is not None:
            self.monitor_expire_time = monitor_expire_time
        if maximum_detection_time is not None:
            self.maximum_detection_time = maximum_detection_time
        if reachability_type is not None:
            self.reachability_type = reachability_type

    @property
    def maximum_detection_time(self):
        return self._maximum_detection_time

    @maximum_detection_time.setter
    def maximum_detection_time(self, maximum_detection_time):
        self._maximum_detection_time = maximum_detection_time

    @property
    def external_id(self):
        """Gets the external_id of this MonitoringEventSubscriptionCreate.  # noqa: E501

        Globally unique identifier containing a Domain Identifier and a Local Identifier. \\<Local Identifier\\>@\\<Domain Identifier\\>  # noqa: E501

        :return: The external_id of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this MonitoringEventSubscriptionCreate.

        Globally unique identifier containing a Domain Identifier and a Local Identifier. \\<Local Identifier\\>@\\<Domain Identifier\\>  # noqa: E501

        :param external_id: The external_id of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def notification_destination(self):
        """Gets the notification_destination of this MonitoringEventSubscriptionCreate.  # noqa: E501

        Reference resource (URL) identifying service consumer's endpoint, in order to receive the asynchronous notification.  # noqa: E501

        :return: The notification_destination of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :rtype: str
        """
        return self._notification_destination

    @notification_destination.setter
    def notification_destination(self, notification_destination):
        """Sets the notification_destination of this MonitoringEventSubscriptionCreate.

        Reference resource (URL) identifying service consumer's endpoint, in order to receive the asynchronous notification.  # noqa: E501

        :param notification_destination: The notification_destination of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :type: str
        """

        self._notification_destination = notification_destination

    @property
    def monitoring_type(self):
        """Gets the monitoring_type of this MonitoringEventSubscriptionCreate.  # noqa: E501


        :return: The monitoring_type of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :rtype: MonitoringType
        """
        return self._monitoring_type

    @monitoring_type.setter
    def monitoring_type(self, monitoring_type):
        """Sets the monitoring_type of this MonitoringEventSubscriptionCreate.


        :param monitoring_type: The monitoring_type of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :type: MonitoringType
        """
        if monitoring_type is None:
            raise ValueError("Invalid value for `monitoring_type`, must not be `None`")  # noqa: E501

        self._monitoring_type = monitoring_type

    @property
    def maximum_number_of_reports(self):
        """Gets the maximum_number_of_reports of this MonitoringEventSubscriptionCreate.  # noqa: E501

        Identifies the maximum number of event reports to be generated. Value 1 makes the Monitoring Request a One-time Request  # noqa: E501

        :return: The maximum_number_of_reports of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :rtype: int
        """
        return self._maximum_number_of_reports

    @maximum_number_of_reports.setter
    def maximum_number_of_reports(self, maximum_number_of_reports):
        """Sets the maximum_number_of_reports of this MonitoringEventSubscriptionCreate.

        Identifies the maximum number of event reports to be generated. Value 1 makes the Monitoring Request a One-time Request  # noqa: E501

        :param maximum_number_of_reports: The maximum_number_of_reports of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :type: int
        """

        self._maximum_number_of_reports = maximum_number_of_reports

    @property
    def monitor_expire_time(self):
        """Gets the monitor_expire_time of this MonitoringEventSubscriptionCreate.  # noqa: E501

        Identifies the absolute time at which the related monitoring event request is considered to expire  # noqa: E501

        :return: The monitor_expire_time of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :rtype: datetime
        """
        return self._monitor_expire_time

    @monitor_expire_time.setter
    def monitor_expire_time(self, monitor_expire_time):
        """Sets the monitor_expire_time of this MonitoringEventSubscriptionCreate.

        Identifies the absolute time at which the related monitoring event request is considered to expire  # noqa: E501

        :param monitor_expire_time: The monitor_expire_time of this MonitoringEventSubscriptionCreate.  # noqa: E501
        :type: datetime
        """

        self._monitor_expire_time = monitor_expire_time

    @property
    def reachability_type(self):
        return self._reachability_type

    @reachability_type.setter
    def reachability_type(self, reachability_type):
        self._reachability_type = reachability_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitoringEventSubscriptionCreate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitoringEventSubscriptionCreate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
