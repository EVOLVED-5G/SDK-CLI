# coding: utf-8

"""
    NEF_Emulator

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AsSessionWithQoSSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link': 'str',
        'ipv4_addr': 'str',
        'ipv6_addr': 'str',
        'mac_addr': 'str',
        'notification_destination': 'str',
        'snssai': 'Snssai',
        'dnn': 'str',
        'qos_reference': 'int',
        'alt_qo_s_references': 'list[int]',
        'usage_threshold': 'UsageThreshold',
        'qos_mon_info': 'QosMonitoringInformation'
    }

    attribute_map = {
        'link': 'link',
        'ipv4_addr': 'ipv4Addr',
        'ipv6_addr': 'ipv6Addr',
        'mac_addr': 'macAddr',
        'notification_destination': 'notificationDestination',
        'snssai': 'snssai',
        'dnn': 'dnn',
        'qos_reference': 'qosReference',
        'alt_qo_s_references': 'altQoSReferences',
        'usage_threshold': 'usageThreshold',
        'qos_mon_info': 'qosMonInfo'
    }

    def __init__(self, link='https://myresource.com', ipv4_addr=None, ipv6_addr='0:0:0:0:0:0:0:1', mac_addr=None, notification_destination='https://example.com/mynetapp', snssai=None, dnn='province1.mnc01.mcc202.gprs', qos_reference=None, alt_qo_s_references=None, usage_threshold=None, qos_mon_info=None):  # noqa: E501
        """AsSessionWithQoSSubscription - a model defined in Swagger"""  # noqa: E501
        self._link = None
        self._ipv4_addr = None
        self._ipv6_addr = None
        self._mac_addr = None
        self._notification_destination = None
        self._snssai = None
        self._dnn = None
        self._qos_reference = None
        self._alt_qo_s_references = None
        self._usage_threshold = None
        self._qos_mon_info = None
        self.discriminator = None
        if link is not None:
            self.link = link
        if ipv4_addr is not None:
            self.ipv4_addr = ipv4_addr
        if ipv6_addr is not None:
            self.ipv6_addr = ipv6_addr
        if mac_addr is not None:
            self.mac_addr = mac_addr
        if notification_destination is not None:
            self.notification_destination = notification_destination
        if snssai is not None:
            self.snssai = snssai
        if dnn is not None:
            self.dnn = dnn
        if qos_reference is not None:
            self.qos_reference = qos_reference
        if alt_qo_s_references is not None:
            self.alt_qo_s_references = alt_qo_s_references
        if usage_threshold is not None:
            self.usage_threshold = usage_threshold
        if qos_mon_info is not None:
            self.qos_mon_info = qos_mon_info

    @property
    def link(self):
        """Gets the link of this AsSessionWithQoSSubscription.  # noqa: E501

        String identifying a referenced resource. This is also returned as a location header in 201 Created Response  # noqa: E501

        :return: The link of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this AsSessionWithQoSSubscription.

        String identifying a referenced resource. This is also returned as a location header in 201 Created Response  # noqa: E501

        :param link: The link of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: str
        """

        self._link = link

    @property
    def ipv4_addr(self):
        """Gets the ipv4_addr of this AsSessionWithQoSSubscription.  # noqa: E501

        String identifying an Ipv4 address  # noqa: E501

        :return: The ipv4_addr of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: str
        """
        return self._ipv4_addr

    @ipv4_addr.setter
    def ipv4_addr(self, ipv4_addr):
        """Sets the ipv4_addr of this AsSessionWithQoSSubscription.

        String identifying an Ipv4 address  # noqa: E501

        :param ipv4_addr: The ipv4_addr of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: str
        """

        self._ipv4_addr = ipv4_addr

    @property
    def ipv6_addr(self):
        """Gets the ipv6_addr of this AsSessionWithQoSSubscription.  # noqa: E501

        String identifying an Ipv6 address. Default value ::1/128 (loopback)  # noqa: E501

        :return: The ipv6_addr of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: str
        """
        return self._ipv6_addr

    @ipv6_addr.setter
    def ipv6_addr(self, ipv6_addr):
        """Sets the ipv6_addr of this AsSessionWithQoSSubscription.

        String identifying an Ipv6 address. Default value ::1/128 (loopback)  # noqa: E501

        :param ipv6_addr: The ipv6_addr of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: str
        """

        self._ipv6_addr = ipv6_addr

    @property
    def mac_addr(self):
        """Gets the mac_addr of this AsSessionWithQoSSubscription.  # noqa: E501


        :return: The mac_addr of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: str
        """
        return self._mac_addr

    @mac_addr.setter
    def mac_addr(self, mac_addr):
        """Sets the mac_addr of this AsSessionWithQoSSubscription.


        :param mac_addr: The mac_addr of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: str
        """

        self._mac_addr = mac_addr

    @property
    def notification_destination(self):
        """Gets the notification_destination of this AsSessionWithQoSSubscription.  # noqa: E501


        :return: The notification_destination of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: str
        """
        return self._notification_destination

    @notification_destination.setter
    def notification_destination(self, notification_destination):
        """Sets the notification_destination of this AsSessionWithQoSSubscription.


        :param notification_destination: The notification_destination of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: str
        """

        self._notification_destination = notification_destination

    @property
    def snssai(self):
        """Gets the snssai of this AsSessionWithQoSSubscription.  # noqa: E501


        :return: The snssai of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: Snssai
        """
        return self._snssai

    @snssai.setter
    def snssai(self, snssai):
        """Sets the snssai of this AsSessionWithQoSSubscription.


        :param snssai: The snssai of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: Snssai
        """

        self._snssai = snssai

    @property
    def dnn(self):
        """Gets the dnn of this AsSessionWithQoSSubscription.  # noqa: E501

        String identifying the Data Network Name (i.e., Access Point Name in 4G)  # noqa: E501

        :return: The dnn of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: str
        """
        return self._dnn

    @dnn.setter
    def dnn(self, dnn):
        """Sets the dnn of this AsSessionWithQoSSubscription.

        String identifying the Data Network Name (i.e., Access Point Name in 4G)  # noqa: E501

        :param dnn: The dnn of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: str
        """

        self._dnn = dnn

    @property
    def qos_reference(self):
        """Gets the qos_reference of this AsSessionWithQoSSubscription.  # noqa: E501

        Identifies a pre-defined QoS Information  # noqa: E501

        :return: The qos_reference of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: int
        """
        return self._qos_reference

    @qos_reference.setter
    def qos_reference(self, qos_reference):
        """Sets the qos_reference of this AsSessionWithQoSSubscription.

        Identifies a pre-defined QoS Information  # noqa: E501

        :param qos_reference: The qos_reference of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: int
        """

        self._qos_reference = qos_reference

    @property
    def alt_qo_s_references(self):
        """Gets the alt_qo_s_references of this AsSessionWithQoSSubscription.  # noqa: E501

        Identifies an ordered list of pre-defined QoS information. The lower the index of the array the higher the priority.  # noqa: E501

        :return: The alt_qo_s_references of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: list[int]
        """
        return self._alt_qo_s_references

    @alt_qo_s_references.setter
    def alt_qo_s_references(self, alt_qo_s_references):
        """Sets the alt_qo_s_references of this AsSessionWithQoSSubscription.

        Identifies an ordered list of pre-defined QoS information. The lower the index of the array the higher the priority.  # noqa: E501

        :param alt_qo_s_references: The alt_qo_s_references of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: list[int]
        """

        self._alt_qo_s_references = alt_qo_s_references

    @property
    def usage_threshold(self):
        """Gets the usage_threshold of this AsSessionWithQoSSubscription.  # noqa: E501


        :return: The usage_threshold of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: UsageThreshold
        """
        return self._usage_threshold

    @usage_threshold.setter
    def usage_threshold(self, usage_threshold):
        """Sets the usage_threshold of this AsSessionWithQoSSubscription.


        :param usage_threshold: The usage_threshold of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: UsageThreshold
        """

        self._usage_threshold = usage_threshold

    @property
    def qos_mon_info(self):
        """Gets the qos_mon_info of this AsSessionWithQoSSubscription.  # noqa: E501


        :return: The qos_mon_info of this AsSessionWithQoSSubscription.  # noqa: E501
        :rtype: QosMonitoringInformation
        """
        return self._qos_mon_info

    @qos_mon_info.setter
    def qos_mon_info(self, qos_mon_info):
        """Sets the qos_mon_info of this AsSessionWithQoSSubscription.


        :param qos_mon_info: The qos_mon_info of this AsSessionWithQoSSubscription.  # noqa: E501
        :type: QosMonitoringInformation
        """

        self._qos_mon_info = qos_mon_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsSessionWithQoSSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsSessionWithQoSSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
