# coding: utf-8

"""
    NEF_Emulator

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserPlaneEventReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event': 'AllOfUserPlaneEventReportEvent',
        'accumulated_usage': 'AccumulatedUsage',
        'applied_qos_ref': 'str',
        'qos_mon_reports': 'list[QoSMonitoringReport]'
    }

    attribute_map = {
        'event': 'event',
        'accumulated_usage': 'accumulatedUsage',
        'applied_qos_ref': 'appliedQosRef',
        'qos_mon_reports': 'qosMonReports'
    }

    def __init__(self, event=None, accumulated_usage=None, applied_qos_ref=None, qos_mon_reports=None):  # noqa: E501
        """UserPlaneEventReport - a model defined in Swagger"""  # noqa: E501
        self._event = None
        self._accumulated_usage = None
        self._applied_qos_ref = None
        self._qos_mon_reports = None
        self.discriminator = None
        self.event = event
        if accumulated_usage is not None:
            self.accumulated_usage = accumulated_usage
        if applied_qos_ref is not None:
            self.applied_qos_ref = applied_qos_ref
        if qos_mon_reports is not None:
            self.qos_mon_reports = qos_mon_reports

    @property
    def event(self):
        """Gets the event of this UserPlaneEventReport.  # noqa: E501

        - QOS_GUARANTEED: The QoS targets of one or more SDFs are guaranteed again. - QOS_NOT_GUARANTEED: The QoS targets of one or more SDFs are not being guaranteed. - USAGE_REPORT: Indicates the usage report event. - QOS_MONITORING: Indicates a QoS monitoring event  # noqa: E501

        :return: The event of this UserPlaneEventReport.  # noqa: E501
        :rtype: AllOfUserPlaneEventReportEvent
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this UserPlaneEventReport.

        - QOS_GUARANTEED: The QoS targets of one or more SDFs are guaranteed again. - QOS_NOT_GUARANTEED: The QoS targets of one or more SDFs are not being guaranteed. - USAGE_REPORT: Indicates the usage report event. - QOS_MONITORING: Indicates a QoS monitoring event  # noqa: E501

        :param event: The event of this UserPlaneEventReport.  # noqa: E501
        :type: AllOfUserPlaneEventReportEvent
        """
        if event is None:
            raise ValueError("Invalid value for `event`, must not be `None`")  # noqa: E501

        self._event = event

    @property
    def accumulated_usage(self):
        """Gets the accumulated_usage of this UserPlaneEventReport.  # noqa: E501


        :return: The accumulated_usage of this UserPlaneEventReport.  # noqa: E501
        :rtype: AccumulatedUsage
        """
        return self._accumulated_usage

    @accumulated_usage.setter
    def accumulated_usage(self, accumulated_usage):
        """Sets the accumulated_usage of this UserPlaneEventReport.


        :param accumulated_usage: The accumulated_usage of this UserPlaneEventReport.  # noqa: E501
        :type: AccumulatedUsage
        """

        self._accumulated_usage = accumulated_usage

    @property
    def applied_qos_ref(self):
        """Gets the applied_qos_ref of this UserPlaneEventReport.  # noqa: E501

        The current applied QoS reference. Applicable for event QoS_NOT_GUARANTEED  # noqa: E501

        :return: The applied_qos_ref of this UserPlaneEventReport.  # noqa: E501
        :rtype: str
        """
        return self._applied_qos_ref

    @applied_qos_ref.setter
    def applied_qos_ref(self, applied_qos_ref):
        """Sets the applied_qos_ref of this UserPlaneEventReport.

        The current applied QoS reference. Applicable for event QoS_NOT_GUARANTEED  # noqa: E501

        :param applied_qos_ref: The applied_qos_ref of this UserPlaneEventReport.  # noqa: E501
        :type: str
        """

        self._applied_qos_ref = applied_qos_ref

    @property
    def qos_mon_reports(self):
        """Gets the qos_mon_reports of this UserPlaneEventReport.  # noqa: E501

        Contains the QoS Monitoring Reporting information  # noqa: E501

        :return: The qos_mon_reports of this UserPlaneEventReport.  # noqa: E501
        :rtype: list[QoSMonitoringReport]
        """
        return self._qos_mon_reports

    @qos_mon_reports.setter
    def qos_mon_reports(self, qos_mon_reports):
        """Sets the qos_mon_reports of this UserPlaneEventReport.

        Contains the QoS Monitoring Reporting information  # noqa: E501

        :param qos_mon_reports: The qos_mon_reports of this UserPlaneEventReport.  # noqa: E501
        :type: list[QoSMonitoringReport]
        """

        self._qos_mon_reports = qos_mon_reports

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserPlaneEventReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserPlaneEventReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
