# coding: utf-8

"""
    NEF_Emulator

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CellUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cell_id': 'str',
        'name': 'str',
        'description': 'str',
        'g_nb_id': 'int',
        'latitude': 'float',
        'longitude': 'float',
        'radius': 'float'
    }

    attribute_map = {
        'cell_id': 'cell_id',
        'name': 'name',
        'description': 'description',
        'g_nb_id': 'gNB_id',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'radius': 'radius'
    }

    def __init__(self, cell_id=None, name=None, description=None, g_nb_id=None, latitude=None, longitude=None, radius=None):  # noqa: E501
        """CellUpdate - a model defined in Swagger"""  # noqa: E501
        self._cell_id = None
        self._name = None
        self._description = None
        self._g_nb_id = None
        self._latitude = None
        self._longitude = None
        self._radius = None
        self.discriminator = None
        self.cell_id = cell_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if g_nb_id is not None:
            self.g_nb_id = g_nb_id
        self.latitude = latitude
        self.longitude = longitude
        self.radius = radius

    @property
    def cell_id(self):
        """Gets the cell_id of this CellUpdate.  # noqa: E501


        :return: The cell_id of this CellUpdate.  # noqa: E501
        :rtype: str
        """
        return self._cell_id

    @cell_id.setter
    def cell_id(self, cell_id):
        """Sets the cell_id of this CellUpdate.


        :param cell_id: The cell_id of this CellUpdate.  # noqa: E501
        :type: str
        """
        if cell_id is None:
            raise ValueError("Invalid value for `cell_id`, must not be `None`")  # noqa: E501

        self._cell_id = cell_id

    @property
    def name(self):
        """Gets the name of this CellUpdate.  # noqa: E501


        :return: The name of this CellUpdate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CellUpdate.


        :param name: The name of this CellUpdate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CellUpdate.  # noqa: E501


        :return: The description of this CellUpdate.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CellUpdate.


        :param description: The description of this CellUpdate.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def g_nb_id(self):
        """Gets the g_nb_id of this CellUpdate.  # noqa: E501


        :return: The g_nb_id of this CellUpdate.  # noqa: E501
        :rtype: int
        """
        return self._g_nb_id

    @g_nb_id.setter
    def g_nb_id(self, g_nb_id):
        """Sets the g_nb_id of this CellUpdate.


        :param g_nb_id: The g_nb_id of this CellUpdate.  # noqa: E501
        :type: int
        """

        self._g_nb_id = g_nb_id

    @property
    def latitude(self):
        """Gets the latitude of this CellUpdate.  # noqa: E501


        :return: The latitude of this CellUpdate.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this CellUpdate.


        :param latitude: The latitude of this CellUpdate.  # noqa: E501
        :type: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")  # noqa: E501

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this CellUpdate.  # noqa: E501


        :return: The longitude of this CellUpdate.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this CellUpdate.


        :param longitude: The longitude of this CellUpdate.  # noqa: E501
        :type: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")  # noqa: E501

        self._longitude = longitude

    @property
    def radius(self):
        """Gets the radius of this CellUpdate.  # noqa: E501


        :return: The radius of this CellUpdate.  # noqa: E501
        :rtype: float
        """
        return self._radius

    @radius.setter
    def radius(self, radius):
        """Sets the radius of this CellUpdate.


        :param radius: The radius of this CellUpdate.  # noqa: E501
        :type: float
        """
        if radius is None:
            raise ValueError("Invalid value for `radius`, must not be `None`")  # noqa: E501

        self._radius = radius

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CellUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CellUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
